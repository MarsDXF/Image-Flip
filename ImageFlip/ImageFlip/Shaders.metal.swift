
// This file is autogenerated, do not edit it
import Alloy


internal class TextureFlip {

  internal let deviceSupportsNonuniformThreadgroups: Bool

  internal let pipelineState: MTLComputePipelineState

  internal init(library: MTLLibrary) throws {
    let constantValues = MTLFunctionConstantValues()
    self.deviceSupportsNonuniformThreadgroups = library.device.supports(feature: .nonUniformThreadgroups)
    constantValues.set(self.deviceSupportsNonuniformThreadgroups, at: 0)
    self.pipelineState = try library.computePipelineState(function: "textureFlip", constants: constantValues)
  }

  internal func encode(sourceTexture: MTLTexture, destinationTexture: MTLTexture, using encoder: MTLComputeCommandEncoder) {
    let _threadgroupSize = self.pipelineState.max2dThreadgroupSize
    encoder.setTexture(sourceTexture, index: 0)
    encoder.setTexture(destinationTexture, index: 1)

    if self.deviceSupportsNonuniformThreadgroups { encoder.dispatch2d(state: self.pipelineState, exactly: destinationTexture.size, threadgroupSize: _threadgroupSize) } else { encoder.dispatch2d(state: self.pipelineState, covering: destinationTexture.size, threadgroupSize: _threadgroupSize) }
  }

}

